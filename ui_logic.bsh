/*** 'Editable' - you can edit the code below based on the needs ***/
import java.util.concurrent.Callable;
import android.util.Log;
User user; // don't touch
String userid;

/*** SYNC ***/
setSyncMinInterval(10.0f);
setSyncMaxInterval(20.0f);
setSyncDelay(5.0f);
setSyncEnabled(true);
setFileSyncEnabled(true);

startInternalGPS();

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Sync enabled";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("Sync disabled.");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "Sync disabled";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("Sync enabled.");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Internal GPS enabled";
    }
    actionOn() {
        stopGPS();
        showToast("GPS disabled.");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "Internal GPS disabled";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("GPS enabled.");
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "External GPS enabled";
    }
    actionOn() {
        stopGPS();
        showToast("GPS disabled.");

    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "External GPS disabled";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("GPS enabled.");
        } else {
            showToast("Please enable bluetooth.");
            this.isActionOff();
        }
    }
});

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);");
    fetchOne("drop view if exists identifierAsSpreadsheet;");
    fetchOne("create view identifierAsSpreadsheet as select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' ') as response from (select * from latestNonDeletedArchentIdentifiers order by attributename) group by uuid;");
}

makeLocalID();

/*** CONTROL ***/
onEvent("Control", "show", "resetNavigation();");
onEvent("Control/Fish", "show", "refreshFishList();");
onEvent("Control/Fish/New_Fish", "click", "newFish();");
onEvent("Control/Fish/Fish_List", "click", "loadFish();");

resetNavigation() {
    removeNavigationButton("duplicate");
    removeNavigationButton("save_and_new");
    removeNavigationButton("save_and_close");
    removeNavigationButton("delete");   
}

refreshFishList() {
    populateCursorList("Control/Fish/Fish_List", "select uuid, group_concat(coalesce(measure, ''),' ') as response " + 
        "from (select * from latestNonDeletedArchentIdentifiers order by attributename DESC) " +
        "where aenttypename = 'Fish' " +
        "group by uuid " +
        "order by response DESC limit ? offset ?;", 25);
}

/*** FISH***/
onEvent("Fish", "show", "addFishNavigation();");
onEvent("Fish/Fish/Attach_Photo", "click", "attachPictureTo(\"Fish/Fish/Photos\");");
onEvent("Fish/Fish/Fill_In_GPS", "click", "fillInGPS(\"Fish/Fish/\");");

String fish_id = null;

newFish() {
    newTabGroup("Fish");
    fish_id = null;
    setFieldValue("Fish/Fish/Author", username);
    setTimestamp("Fish/Fish/Timestamp");
    saveFish(new Callable() {
        call() {
            saveTabGroup("Fish", fish_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    fish_id = uuid;
                }
            }, true);
        }
    });
}

loadFish() {
    fish_id = getListItemValue();
    loadFishFrom(fish_id);
}

loadFishFrom(archentid) {
    if (isNull(archentid)) {
        showToast("No {Fish} selected");
        return;
    }

    showTabGroup("Fish", archentid, new FetchCallback() {
        onFetch(result) {
            fish_id = archentid;
            saveTabGroup("Fish", fish_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    fish_id = uuid;
                }
            }, true);
        }
    });
}

saveFish(Callable callback) {
    saveTabGroup("Fish", fish_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            fish_id = uuid;
            if(callback != null) callback.call();
        }
    });
}

deleteFish() {
    if (!isNull(fish_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this {Fish}!", "reallyDeleteFish()", "doNotDelete()");
    } else {
        cancelTabGroup("Fish", true);
    }
}

reallyDeleteFish() {
    deleteArchEnt(fish_id, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup("Fish", false);
        }
    });
}

loadFishAttributes() {
    makeVocab("PictureGallery", "Fish/Fish/Fish_Type", "Fish Type");
    makeVocab("RadioGroup", "Fish/Fish/Sex", "Sex");
    makeVocab("CheckBoxGroup", "Fish/Fish/Weather_Conditions", "Weather Conditions");
    makeVocab("DropDown", "Fish/Fish/Fishing_Methods", "Fishing Method");
    makeVocab("RadioGroup", "Fish/Fish/Released", "Released?");
}

addFishNavigation() {
    removeNavigationButton("duplicate");
    removeNavigationButton("save_and_new");
    removeNavigationButton("save_and_close");
    removeNavigationButton("delete");   

    addNavigationButton("duplicate", new ActionButtonCallback() {
        actionOnLabel() {
            "Duplicate {Fish}";
        }
        actionOn() {
            showTabGroup("Fish", fish_id, new FetchCallback() {
                onFetch(result) {
                    fish_id = null;
                    setFieldValue("Fish/Fish/Author", username);
                    populateCameraPictureGallery("Fish/Fish/Photos", new ArrayList());
                    setTimestamp("Fish/Fish/Timestamp");
                    saveFish(new Callable() {
                        call() {
                            saveTabGroup("Fish", fish_id, null, null, new SaveCallback() {
                                onSave(uuid, newRecord) {
                                    fish_id = uuid;
                                }
                            }, true);
                        }
                    });
                }
            });
        }
    }, "success");

    addNavigationButton("save_and_new", new ActionButtonCallback() {
        actionOnLabel() {
            "New {Fish}";
        }
        actionOn() {
            if(!isNull(fish_id)) {
                newPhotolognewFish();
            } else {
                showAlert("Warning", "You will lose any unsaved changes!", "newFish();", "");
            }
            newFish();
        }
    }, "success");

    addNavigationButton("save_and_close", new ActionButtonCallback() {
        actionOnLabel() {
            "Close {Fish} Tab";
        }
        actionOn() {
            if(!isNull(fish_id)) {
                cancelTabGroup("Fish", false);
            } else {
                cancelTabGroup("Fish", true);
            }
            
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "Delete {Fish}";
        }
        actionOn() {
            deleteFish();
        }
    }, "danger");
}

fetchVocab(String vocabName, List storageList) {
  fetchVocab(vocabName, storageList, null);
}
fetchVocab(String vocabName, List storageList, String callbackFunction) {
  fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = '" + vocabName + "';", new FetchCallback() {
    onFetch(result) {
      storageList.addAll(result);
      Log.d("fetchVocab()", "Fetched vocabulary \"" + vocabname + "\" contents: " + result.toString());
      if (callbackFunction != null && !isNull(callbackFunction)) {
        execute(callbackFunction);
      }
    }
  });
}

/** Wrapper for to make a vocab without an exlusion list **/
makeVocab(String type, String path, String attrib) {
  makeVocab(type, path, attrib, null);
}

/** Vocab Population **/
/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, HierarchicalPictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions) {
    makeVocab(type, path, attrib, vocabExclusions, null);
}

/*** MISC ***/
makeVocab(String type, String path, String attrib, List vocabExclusions, String callbackFunction){
  if (isNull(type) || isNull(path) || isNull(attrib)) {
    Log.e("makeVocab()", "Can't make populate a vocab when the given type, path or attribute is Null");
    return;
  }

  if (type.equals("PictureGallery")) {
    String pictureGalleryQuery = "SELECT vocabid, vocabname, pictureurl "+
                                 "  FROM vocabulary "+
                                 "  LEFT OUTER JOIN attributekey USING (attributeid) "+
                                 " WHERE attributename = '" + attrib + "' "+
                                 " ORDER BY  vocabcountorder;";
    fetchAll(pictureGalleryQuery, new FetchCallback() {
      onFetch(pictures) {
        populatePictureGallery(path, pictures);
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
    return;
  }

  if (type.equals("HierarchicalPictureGallery")) {
    populateHierarchicalPictureGallery(path, attrib);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  if (type.equals("HierarchicalDropDown")) {
    // populateHierarchicalDropDown(path, attrib);
    populateHierarchicalDropDown(path, attrib, true);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  String getAttributeVocabQuery = "SELECT vocabid, vocabname "+
                                  "  FROM vocabulary "+
                                  "  JOIN attributekey USING (attributeid) "+
                                  " WHERE attributename = '" + attrib + "' "+
                                  " ORDER BY vocabcountorder;";
  fetchAll(getAttributeVocabQuery,
    new FetchCallback() {
      onFetch(result) {
        // print("makeVocab() result: " + result);
        if (result!=null && result.size()>0 && vocabExclusions!=null && vocabExclusions.size()>0) {
          List filteredVocab = new ArrayList();
          for(item : result) {
            if (vocabExclusions.contains(item.get(1))) {
              Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
            } else {
              filteredVocab.add(item);
            }
          }
          result=filteredVocab;
        }
        // print("makeVocab() filtered result: " + result);
        if(type.equals("CheckBoxGroup")) {
          populateCheckBoxGroup(path, result);
        } else if(type.equals("DropDown")) {
          // populateDropDown(path, result);
          populateDropDown(path, result, true);
        } else if(type.equals("RadioGroup")) {
          populateRadioGroup(path, result);
        } else if(type.equals("List")) {
          populateList(path, result);
        }
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
}

doNotDelete() {
    showToast("Delete Cancelled.");
}

setTimestamp(String path) {
    setFieldValue(path, new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss z").format(new Date()));
}

fillInGPS(String path) {
    Object position = getGPSPosition();
    if (position != null) {
        Double latitude = position.getLatitude();
        Double longitude = position.getLongitude();
        setFieldValue(path+"Latitude", latitude);
        setFieldValue(path+"Longitude", longitude);
    } else {
        showToast("GPS Not initialized");
    }
}

/*** 'Uneditable' - you can edit the code below with extreme precaution ***/
/*** USER ***/

loadUsers() {
    fetchAll("select userid, fname || ' ' || lname from user where userdeleted is null", new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

loadUsers();

String username = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("Control");
        }
    });
}

onEvent("user/usertab/users", "click", "login()");

loadFishAttributes();

/******************************* RANGE CHECKING *******************************/
import java.math.BigDecimal;

// The range permitted in the "Size" attribute depends on the value of the
// dropdown referred to by `DROPDOWN_REF`.
Map    RANGES        = new HashMap();
String DROPDOWN_REF  = "Fish/Fish/Fish_Type";
List   DROPDOWN_VALS = new ArrayList(); //[String: vocabid, String: vocabname]

// Sets range validation on the GUI element in `k1` (which is the path to the
// element to validated). Validation is only undertaken if the value of `k2`
// equals the value of the element at `DROPDOWN_REF` at the time the `onFocus`
// event is triggered for `k1`.
//
// The upper and lower range bounds are set to `min` and `max`, inclusive.
setRange(String k1, String k2, String min, String max) {
  // Convert k2 from human-readable vocabname to vocabid
  k2 = "{" + k2 + "}";
  for (List val : DROPDOWN_VALS) {
    String vocabId   = val.get(0);
    String vocabName = val.get(1);

    if (k2.equals(vocabName)) {
      k2 = vocabId;
      break;
    }
  }

  // Save the range
  key = makeKey(k1, k2);
  val = makeVal(min, max);
  RANGES.put(key, val);

  // onFocus() binding to do validation on blur
  onFocusCallback = null;
  onBlurCallback  = "validateOnBlur(\"" + k1 + "\")";
  onFocus(k1, onFocusCallback, onBlurCallback);
}

getRange(k1, k2) {
  key = makeKey(k1, k2);
  return getRange(key);
}

getRange(key) {
  return RANGES.get(key);
}

makeKey(String k1, String k2) {
  List l = new ArrayList();
  l.add(k1);
  l.add(k2);
  return l;
}

makeVal(String min, String max) {
  List l = new ArrayList();
  l.add(0, min);
  l.add(1, max);
  return l;
}

getMin(List range) { return new BigDecimal(range.get(0)); }

getMax(List range) { return new BigDecimal(range.get(1)); }

isNullBirdSpecies() {
  return isNull(getFieldValue(DROPDOWN_REF));
}

isInRange(String fieldRef) {
  if (isNullBirdSpecies())             return true;
  if (isNull(getFieldValue(fieldRef))) return true;

  k1 = fieldRef;
  k2 = getFieldValue(DROPDOWN_REF);

  range = getRange(k1, k2); /* oh, btw */ if (range == null) return true;
  min = getMin(range);
  max = getMax(range);

  val = getFieldValue(fieldRef);
  val = new BigDecimal(val);

  if (val.compareTo(min) == -1) return false;
  if (val.compareTo(max) == +1) return false;
  return true;
}

// Shows a warning if the value of the element at `fieldRef` is out of range.
// Does nothing otherwise.
validateOnBlur(String fieldRef) {
  if (isInRange(fieldRef)) {
    return;
  }

  // Find the permitted values for the failing field
  k1 = fieldRef;
  k2 = getFieldValue(DROPDOWN_REF);
  range = getRange(k1, k2);

  // Get the human-readable name for the failing field
  String arch16n = "";
  arch16n = fieldRef.split("/")[2];
  arch16n = "{" + arch16n + "}";

  // Build a nice error message for the user
  String msg = "";
  msg += "{Value_out_of_range_for_the_field} '" + arch16n + "'. ";
  msg += "{Permitted_values_are_in_the_interval} " + range.toString() + ".";

  // Inform user that dey dun goof'd
  showWarning("Validation Failed", msg);
}

setRanges() {
  setRange("Fish/Fish/Size", "Mangrove_Jack", "15.0", "120");
  setRange("Fish/Fish/Size", "Carp",          "15.0", "100");
  setRange("Fish/Fish/Size", "Barramundi",    "15.0", "120");
  setRange("Fish/Fish/Size", "Bass",          "15.0",  "65");
  setRange("Fish/Fish/Size", "Perch",         "15.0",  "45");
  setRange("Fish/Fish/Size", "Garfish",        "0.0",  "22");
}

// `setRanges` requires `DROPDOWN_VALS` to contain the menu entries of Fish Type
fetchVocab("Fish Type", DROPDOWN_VALS, "setRanges()");
